// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/osmand_odb.proto

package net.osmand.binary;

public final class OsmandOdb {
  private OsmandOdb() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class OsmAndStructure extends
      com.google.protobuf.GeneratedMessage {
    // Use OsmAndStructure.newBuilder() to construct.
    private OsmAndStructure() {
      initFields();
    }
    private OsmAndStructure(boolean noInit) {}
    
    private static final OsmAndStructure defaultInstance;
    public static OsmAndStructure getDefaultInstance() {
      return defaultInstance;
    }
    
    public OsmAndStructure getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_OsmAndStructure_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_OsmAndStructure_fieldAccessorTable;
    }
    
    // required uint32 version = 1;
    public static final int VERSION_FIELD_NUMBER = 1;
    private boolean hasVersion;
    private int version_ = 0;
    public boolean hasVersion() { return hasVersion; }
    public int getVersion() { return version_; }
    
    // repeated .OsmAndMapIndex mapIndex = 2;
    public static final int MAPINDEX_FIELD_NUMBER = 2;
    private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex> mapIndex_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex> getMapIndexList() {
      return mapIndex_;
    }
    public int getMapIndexCount() { return mapIndex_.size(); }
    public net.osmand.binary.OsmandOdb.OsmAndMapIndex getMapIndex(int index) {
      return mapIndex_.get(index);
    }
    
    // repeated .OsmAndAddressIndex addressIndex = 3;
    public static final int ADDRESSINDEX_FIELD_NUMBER = 3;
    private java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex> addressIndex_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex> getAddressIndexList() {
      return addressIndex_;
    }
    public int getAddressIndexCount() { return addressIndex_.size(); }
    public net.osmand.binary.OsmandOdb.OsmAndAddressIndex getAddressIndex(int index) {
      return addressIndex_.get(index);
    }
    
    // required uint32 versionConfirm = 32;
    public static final int VERSIONCONFIRM_FIELD_NUMBER = 32;
    private boolean hasVersionConfirm;
    private int versionConfirm_ = 0;
    public boolean hasVersionConfirm() { return hasVersionConfirm; }
    public int getVersionConfirm() { return versionConfirm_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasVersion) return false;
      if (!hasVersionConfirm) return false;
      for (net.osmand.binary.OsmandOdb.OsmAndMapIndex element : getMapIndexList()) {
        if (!element.isInitialized()) return false;
      }
      for (net.osmand.binary.OsmandOdb.OsmAndAddressIndex element : getAddressIndexList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasVersion()) {
        output.writeUInt32(1, getVersion());
      }
      for (net.osmand.binary.OsmandOdb.OsmAndMapIndex element : getMapIndexList()) {
        output.writeMessage(2, element);
      }
      for (net.osmand.binary.OsmandOdb.OsmAndAddressIndex element : getAddressIndexList()) {
        output.writeMessage(3, element);
      }
      if (hasVersionConfirm()) {
        output.writeUInt32(32, getVersionConfirm());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasVersion()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getVersion());
      }
      for (net.osmand.binary.OsmandOdb.OsmAndMapIndex element : getMapIndexList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      for (net.osmand.binary.OsmandOdb.OsmAndAddressIndex element : getAddressIndexList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, element);
      }
      if (hasVersionConfirm()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(32, getVersionConfirm());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.OsmAndStructure parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndStructure parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndStructure parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndStructure parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndStructure parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndStructure parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndStructure parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.OsmAndStructure parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.OsmAndStructure parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndStructure parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.OsmAndStructure prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.OsmAndStructure result;
      
      // Construct using net.osmand.binary.OsmandOdb.OsmAndStructure.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.OsmAndStructure();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.OsmAndStructure internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.OsmAndStructure();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.OsmAndStructure.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.OsmAndStructure getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.OsmAndStructure.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.OsmAndStructure build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.OsmAndStructure buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.OsmAndStructure buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.mapIndex_ != java.util.Collections.EMPTY_LIST) {
          result.mapIndex_ =
            java.util.Collections.unmodifiableList(result.mapIndex_);
        }
        if (result.addressIndex_ != java.util.Collections.EMPTY_LIST) {
          result.addressIndex_ =
            java.util.Collections.unmodifiableList(result.addressIndex_);
        }
        net.osmand.binary.OsmandOdb.OsmAndStructure returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.OsmAndStructure) {
          return mergeFrom((net.osmand.binary.OsmandOdb.OsmAndStructure)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.OsmAndStructure other) {
        if (other == net.osmand.binary.OsmandOdb.OsmAndStructure.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (!other.mapIndex_.isEmpty()) {
          if (result.mapIndex_.isEmpty()) {
            result.mapIndex_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex>();
          }
          result.mapIndex_.addAll(other.mapIndex_);
        }
        if (!other.addressIndex_.isEmpty()) {
          if (result.addressIndex_.isEmpty()) {
            result.addressIndex_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndAddressIndex>();
          }
          result.addressIndex_.addAll(other.addressIndex_);
        }
        if (other.hasVersionConfirm()) {
          setVersionConfirm(other.getVersionConfirm());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setVersion(input.readUInt32());
              break;
            }
            case 18: {
              net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder subBuilder = net.osmand.binary.OsmandOdb.OsmAndMapIndex.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addMapIndex(subBuilder.buildPartial());
              break;
            }
            case 26: {
              net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder subBuilder = net.osmand.binary.OsmandOdb.OsmAndAddressIndex.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addAddressIndex(subBuilder.buildPartial());
              break;
            }
            case 256: {
              setVersionConfirm(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // required uint32 version = 1;
      public boolean hasVersion() {
        return result.hasVersion();
      }
      public int getVersion() {
        return result.getVersion();
      }
      public Builder setVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder clearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      // repeated .OsmAndMapIndex mapIndex = 2;
      public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex> getMapIndexList() {
        return java.util.Collections.unmodifiableList(result.mapIndex_);
      }
      public int getMapIndexCount() {
        return result.getMapIndexCount();
      }
      public net.osmand.binary.OsmandOdb.OsmAndMapIndex getMapIndex(int index) {
        return result.getMapIndex(index);
      }
      public Builder setMapIndex(int index, net.osmand.binary.OsmandOdb.OsmAndMapIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.mapIndex_.set(index, value);
        return this;
      }
      public Builder setMapIndex(int index, net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder builderForValue) {
        result.mapIndex_.set(index, builderForValue.build());
        return this;
      }
      public Builder addMapIndex(net.osmand.binary.OsmandOdb.OsmAndMapIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.mapIndex_.isEmpty()) {
          result.mapIndex_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex>();
        }
        result.mapIndex_.add(value);
        return this;
      }
      public Builder addMapIndex(net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder builderForValue) {
        if (result.mapIndex_.isEmpty()) {
          result.mapIndex_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex>();
        }
        result.mapIndex_.add(builderForValue.build());
        return this;
      }
      public Builder addAllMapIndex(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex> values) {
        if (result.mapIndex_.isEmpty()) {
          result.mapIndex_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex>();
        }
        super.addAll(values, result.mapIndex_);
        return this;
      }
      public Builder clearMapIndex() {
        result.mapIndex_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .OsmAndAddressIndex addressIndex = 3;
      public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex> getAddressIndexList() {
        return java.util.Collections.unmodifiableList(result.addressIndex_);
      }
      public int getAddressIndexCount() {
        return result.getAddressIndexCount();
      }
      public net.osmand.binary.OsmandOdb.OsmAndAddressIndex getAddressIndex(int index) {
        return result.getAddressIndex(index);
      }
      public Builder setAddressIndex(int index, net.osmand.binary.OsmandOdb.OsmAndAddressIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.addressIndex_.set(index, value);
        return this;
      }
      public Builder setAddressIndex(int index, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder builderForValue) {
        result.addressIndex_.set(index, builderForValue.build());
        return this;
      }
      public Builder addAddressIndex(net.osmand.binary.OsmandOdb.OsmAndAddressIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.addressIndex_.isEmpty()) {
          result.addressIndex_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndAddressIndex>();
        }
        result.addressIndex_.add(value);
        return this;
      }
      public Builder addAddressIndex(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder builderForValue) {
        if (result.addressIndex_.isEmpty()) {
          result.addressIndex_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndAddressIndex>();
        }
        result.addressIndex_.add(builderForValue.build());
        return this;
      }
      public Builder addAllAddressIndex(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndAddressIndex> values) {
        if (result.addressIndex_.isEmpty()) {
          result.addressIndex_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndAddressIndex>();
        }
        super.addAll(values, result.addressIndex_);
        return this;
      }
      public Builder clearAddressIndex() {
        result.addressIndex_ = java.util.Collections.emptyList();
        return this;
      }
      
      // required uint32 versionConfirm = 32;
      public boolean hasVersionConfirm() {
        return result.hasVersionConfirm();
      }
      public int getVersionConfirm() {
        return result.getVersionConfirm();
      }
      public Builder setVersionConfirm(int value) {
        result.hasVersionConfirm = true;
        result.versionConfirm_ = value;
        return this;
      }
      public Builder clearVersionConfirm() {
        result.hasVersionConfirm = false;
        result.versionConfirm_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:OsmAndStructure)
    }
    
    static {
      defaultInstance = new OsmAndStructure(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:OsmAndStructure)
  }
  
  public static final class OsmAndMapIndex extends
      com.google.protobuf.GeneratedMessage {
    // Use OsmAndMapIndex.newBuilder() to construct.
    private OsmAndMapIndex() {
      initFields();
    }
    private OsmAndMapIndex(boolean noInit) {}
    
    private static final OsmAndMapIndex defaultInstance;
    public static OsmAndMapIndex getDefaultInstance() {
      return defaultInstance;
    }
    
    public OsmAndMapIndex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_OsmAndMapIndex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_OsmAndMapIndex_fieldAccessorTable;
    }
    
    // repeated .MapRootLevel levels = 1;
    public static final int LEVELS_FIELD_NUMBER = 1;
    private java.util.List<net.osmand.binary.OsmandOdb.MapRootLevel> levels_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.MapRootLevel> getLevelsList() {
      return levels_;
    }
    public int getLevelsCount() { return levels_.size(); }
    public net.osmand.binary.OsmandOdb.MapRootLevel getLevels(int index) {
      return levels_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (net.osmand.binary.OsmandOdb.MapRootLevel element : getLevelsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (net.osmand.binary.OsmandOdb.MapRootLevel element : getLevelsList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (net.osmand.binary.OsmandOdb.MapRootLevel element : getLevelsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.OsmAndMapIndex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndMapIndex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndMapIndex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndMapIndex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndMapIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndMapIndex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndMapIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.OsmAndMapIndex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.OsmAndMapIndex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndMapIndex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.OsmAndMapIndex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.OsmAndMapIndex result;
      
      // Construct using net.osmand.binary.OsmandOdb.OsmAndMapIndex.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.OsmAndMapIndex();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.OsmAndMapIndex internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.OsmAndMapIndex();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.OsmAndMapIndex.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.OsmAndMapIndex getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.OsmAndMapIndex.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.OsmAndMapIndex build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.OsmAndMapIndex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.OsmAndMapIndex buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.levels_ != java.util.Collections.EMPTY_LIST) {
          result.levels_ =
            java.util.Collections.unmodifiableList(result.levels_);
        }
        net.osmand.binary.OsmandOdb.OsmAndMapIndex returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.OsmAndMapIndex) {
          return mergeFrom((net.osmand.binary.OsmandOdb.OsmAndMapIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.OsmAndMapIndex other) {
        if (other == net.osmand.binary.OsmandOdb.OsmAndMapIndex.getDefaultInstance()) return this;
        if (!other.levels_.isEmpty()) {
          if (result.levels_.isEmpty()) {
            result.levels_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapRootLevel>();
          }
          result.levels_.addAll(other.levels_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              net.osmand.binary.OsmandOdb.MapRootLevel.Builder subBuilder = net.osmand.binary.OsmandOdb.MapRootLevel.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addLevels(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .MapRootLevel levels = 1;
      public java.util.List<net.osmand.binary.OsmandOdb.MapRootLevel> getLevelsList() {
        return java.util.Collections.unmodifiableList(result.levels_);
      }
      public int getLevelsCount() {
        return result.getLevelsCount();
      }
      public net.osmand.binary.OsmandOdb.MapRootLevel getLevels(int index) {
        return result.getLevels(index);
      }
      public Builder setLevels(int index, net.osmand.binary.OsmandOdb.MapRootLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.levels_.set(index, value);
        return this;
      }
      public Builder setLevels(int index, net.osmand.binary.OsmandOdb.MapRootLevel.Builder builderForValue) {
        result.levels_.set(index, builderForValue.build());
        return this;
      }
      public Builder addLevels(net.osmand.binary.OsmandOdb.MapRootLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.levels_.isEmpty()) {
          result.levels_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapRootLevel>();
        }
        result.levels_.add(value);
        return this;
      }
      public Builder addLevels(net.osmand.binary.OsmandOdb.MapRootLevel.Builder builderForValue) {
        if (result.levels_.isEmpty()) {
          result.levels_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapRootLevel>();
        }
        result.levels_.add(builderForValue.build());
        return this;
      }
      public Builder addAllLevels(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.MapRootLevel> values) {
        if (result.levels_.isEmpty()) {
          result.levels_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapRootLevel>();
        }
        super.addAll(values, result.levels_);
        return this;
      }
      public Builder clearLevels() {
        result.levels_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:OsmAndMapIndex)
    }
    
    static {
      defaultInstance = new OsmAndMapIndex(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:OsmAndMapIndex)
  }
  
  public static final class MapRootLevel extends
      com.google.protobuf.GeneratedMessage {
    // Use MapRootLevel.newBuilder() to construct.
    private MapRootLevel() {
      initFields();
    }
    private MapRootLevel(boolean noInit) {}
    
    private static final MapRootLevel defaultInstance;
    public static MapRootLevel getDefaultInstance() {
      return defaultInstance;
    }
    
    public MapRootLevel getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_MapRootLevel_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_MapRootLevel_fieldAccessorTable;
    }
    
    // required int32 maxZoom = 1;
    public static final int MAXZOOM_FIELD_NUMBER = 1;
    private boolean hasMaxZoom;
    private int maxZoom_ = 0;
    public boolean hasMaxZoom() { return hasMaxZoom; }
    public int getMaxZoom() { return maxZoom_; }
    
    // required int32 minZoom = 2;
    public static final int MINZOOM_FIELD_NUMBER = 2;
    private boolean hasMinZoom;
    private int minZoom_ = 0;
    public boolean hasMinZoom() { return hasMinZoom; }
    public int getMinZoom() { return minZoom_; }
    
    // required int32 left = 3;
    public static final int LEFT_FIELD_NUMBER = 3;
    private boolean hasLeft;
    private int left_ = 0;
    public boolean hasLeft() { return hasLeft; }
    public int getLeft() { return left_; }
    
    // required int32 right = 4;
    public static final int RIGHT_FIELD_NUMBER = 4;
    private boolean hasRight;
    private int right_ = 0;
    public boolean hasRight() { return hasRight; }
    public int getRight() { return right_; }
    
    // required int32 top = 5;
    public static final int TOP_FIELD_NUMBER = 5;
    private boolean hasTop;
    private int top_ = 0;
    public boolean hasTop() { return hasTop; }
    public int getTop() { return top_; }
    
    // required int32 bottom = 6;
    public static final int BOTTOM_FIELD_NUMBER = 6;
    private boolean hasBottom;
    private int bottom_ = 0;
    public boolean hasBottom() { return hasBottom; }
    public int getBottom() { return bottom_; }
    
    // repeated .MapTree root = 7;
    public static final int ROOT_FIELD_NUMBER = 7;
    private java.util.List<net.osmand.binary.OsmandOdb.MapTree> root_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.MapTree> getRootList() {
      return root_;
    }
    public int getRootCount() { return root_.size(); }
    public net.osmand.binary.OsmandOdb.MapTree getRoot(int index) {
      return root_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasMaxZoom) return false;
      if (!hasMinZoom) return false;
      if (!hasLeft) return false;
      if (!hasRight) return false;
      if (!hasTop) return false;
      if (!hasBottom) return false;
      for (net.osmand.binary.OsmandOdb.MapTree element : getRootList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasMaxZoom()) {
        output.writeInt32(1, getMaxZoom());
      }
      if (hasMinZoom()) {
        output.writeInt32(2, getMinZoom());
      }
      if (hasLeft()) {
        output.writeInt32(3, getLeft());
      }
      if (hasRight()) {
        output.writeInt32(4, getRight());
      }
      if (hasTop()) {
        output.writeInt32(5, getTop());
      }
      if (hasBottom()) {
        output.writeInt32(6, getBottom());
      }
      for (net.osmand.binary.OsmandOdb.MapTree element : getRootList()) {
        output.writeMessage(7, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasMaxZoom()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getMaxZoom());
      }
      if (hasMinZoom()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getMinZoom());
      }
      if (hasLeft()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getLeft());
      }
      if (hasRight()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getRight());
      }
      if (hasTop()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getTop());
      }
      if (hasBottom()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getBottom());
      }
      for (net.osmand.binary.OsmandOdb.MapTree element : getRootList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.MapRootLevel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapRootLevel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapRootLevel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapRootLevel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapRootLevel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapRootLevel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapRootLevel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.MapRootLevel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.MapRootLevel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapRootLevel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.MapRootLevel prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.MapRootLevel result;
      
      // Construct using net.osmand.binary.OsmandOdb.MapRootLevel.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.MapRootLevel();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.MapRootLevel internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.MapRootLevel();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.MapRootLevel.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.MapRootLevel getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.MapRootLevel.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.MapRootLevel build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.MapRootLevel buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.MapRootLevel buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.root_ != java.util.Collections.EMPTY_LIST) {
          result.root_ =
            java.util.Collections.unmodifiableList(result.root_);
        }
        net.osmand.binary.OsmandOdb.MapRootLevel returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.MapRootLevel) {
          return mergeFrom((net.osmand.binary.OsmandOdb.MapRootLevel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.MapRootLevel other) {
        if (other == net.osmand.binary.OsmandOdb.MapRootLevel.getDefaultInstance()) return this;
        if (other.hasMaxZoom()) {
          setMaxZoom(other.getMaxZoom());
        }
        if (other.hasMinZoom()) {
          setMinZoom(other.getMinZoom());
        }
        if (other.hasLeft()) {
          setLeft(other.getLeft());
        }
        if (other.hasRight()) {
          setRight(other.getRight());
        }
        if (other.hasTop()) {
          setTop(other.getTop());
        }
        if (other.hasBottom()) {
          setBottom(other.getBottom());
        }
        if (!other.root_.isEmpty()) {
          if (result.root_.isEmpty()) {
            result.root_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapTree>();
          }
          result.root_.addAll(other.root_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setMaxZoom(input.readInt32());
              break;
            }
            case 16: {
              setMinZoom(input.readInt32());
              break;
            }
            case 24: {
              setLeft(input.readInt32());
              break;
            }
            case 32: {
              setRight(input.readInt32());
              break;
            }
            case 40: {
              setTop(input.readInt32());
              break;
            }
            case 48: {
              setBottom(input.readInt32());
              break;
            }
            case 58: {
              net.osmand.binary.OsmandOdb.MapTree.Builder subBuilder = net.osmand.binary.OsmandOdb.MapTree.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRoot(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required int32 maxZoom = 1;
      public boolean hasMaxZoom() {
        return result.hasMaxZoom();
      }
      public int getMaxZoom() {
        return result.getMaxZoom();
      }
      public Builder setMaxZoom(int value) {
        result.hasMaxZoom = true;
        result.maxZoom_ = value;
        return this;
      }
      public Builder clearMaxZoom() {
        result.hasMaxZoom = false;
        result.maxZoom_ = 0;
        return this;
      }
      
      // required int32 minZoom = 2;
      public boolean hasMinZoom() {
        return result.hasMinZoom();
      }
      public int getMinZoom() {
        return result.getMinZoom();
      }
      public Builder setMinZoom(int value) {
        result.hasMinZoom = true;
        result.minZoom_ = value;
        return this;
      }
      public Builder clearMinZoom() {
        result.hasMinZoom = false;
        result.minZoom_ = 0;
        return this;
      }
      
      // required int32 left = 3;
      public boolean hasLeft() {
        return result.hasLeft();
      }
      public int getLeft() {
        return result.getLeft();
      }
      public Builder setLeft(int value) {
        result.hasLeft = true;
        result.left_ = value;
        return this;
      }
      public Builder clearLeft() {
        result.hasLeft = false;
        result.left_ = 0;
        return this;
      }
      
      // required int32 right = 4;
      public boolean hasRight() {
        return result.hasRight();
      }
      public int getRight() {
        return result.getRight();
      }
      public Builder setRight(int value) {
        result.hasRight = true;
        result.right_ = value;
        return this;
      }
      public Builder clearRight() {
        result.hasRight = false;
        result.right_ = 0;
        return this;
      }
      
      // required int32 top = 5;
      public boolean hasTop() {
        return result.hasTop();
      }
      public int getTop() {
        return result.getTop();
      }
      public Builder setTop(int value) {
        result.hasTop = true;
        result.top_ = value;
        return this;
      }
      public Builder clearTop() {
        result.hasTop = false;
        result.top_ = 0;
        return this;
      }
      
      // required int32 bottom = 6;
      public boolean hasBottom() {
        return result.hasBottom();
      }
      public int getBottom() {
        return result.getBottom();
      }
      public Builder setBottom(int value) {
        result.hasBottom = true;
        result.bottom_ = value;
        return this;
      }
      public Builder clearBottom() {
        result.hasBottom = false;
        result.bottom_ = 0;
        return this;
      }
      
      // repeated .MapTree root = 7;
      public java.util.List<net.osmand.binary.OsmandOdb.MapTree> getRootList() {
        return java.util.Collections.unmodifiableList(result.root_);
      }
      public int getRootCount() {
        return result.getRootCount();
      }
      public net.osmand.binary.OsmandOdb.MapTree getRoot(int index) {
        return result.getRoot(index);
      }
      public Builder setRoot(int index, net.osmand.binary.OsmandOdb.MapTree value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.root_.set(index, value);
        return this;
      }
      public Builder setRoot(int index, net.osmand.binary.OsmandOdb.MapTree.Builder builderForValue) {
        result.root_.set(index, builderForValue.build());
        return this;
      }
      public Builder addRoot(net.osmand.binary.OsmandOdb.MapTree value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.root_.isEmpty()) {
          result.root_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapTree>();
        }
        result.root_.add(value);
        return this;
      }
      public Builder addRoot(net.osmand.binary.OsmandOdb.MapTree.Builder builderForValue) {
        if (result.root_.isEmpty()) {
          result.root_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapTree>();
        }
        result.root_.add(builderForValue.build());
        return this;
      }
      public Builder addAllRoot(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.MapTree> values) {
        if (result.root_.isEmpty()) {
          result.root_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapTree>();
        }
        super.addAll(values, result.root_);
        return this;
      }
      public Builder clearRoot() {
        result.root_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:MapRootLevel)
    }
    
    static {
      defaultInstance = new MapRootLevel(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:MapRootLevel)
  }
  
  public static final class MapTree extends
      com.google.protobuf.GeneratedMessage {
    // Use MapTree.newBuilder() to construct.
    private MapTree() {
      initFields();
    }
    private MapTree(boolean noInit) {}
    
    private static final MapTree defaultInstance;
    public static MapTree getDefaultInstance() {
      return defaultInstance;
    }
    
    public MapTree getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_MapTree_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_MapTree_fieldAccessorTable;
    }
    
    // required sint32 left = 1;
    public static final int LEFT_FIELD_NUMBER = 1;
    private boolean hasLeft;
    private int left_ = 0;
    public boolean hasLeft() { return hasLeft; }
    public int getLeft() { return left_; }
    
    // required sint32 right = 2;
    public static final int RIGHT_FIELD_NUMBER = 2;
    private boolean hasRight;
    private int right_ = 0;
    public boolean hasRight() { return hasRight; }
    public int getRight() { return right_; }
    
    // required sint32 top = 3;
    public static final int TOP_FIELD_NUMBER = 3;
    private boolean hasTop;
    private int top_ = 0;
    public boolean hasTop() { return hasTop; }
    public int getTop() { return top_; }
    
    // required sint32 bottom = 4;
    public static final int BOTTOM_FIELD_NUMBER = 4;
    private boolean hasBottom;
    private int bottom_ = 0;
    public boolean hasBottom() { return hasBottom; }
    public int getBottom() { return bottom_; }
    
    // optional .StringTable stringTable = 5;
    public static final int STRINGTABLE_FIELD_NUMBER = 5;
    private boolean hasStringTable;
    private net.osmand.binary.OsmandOdb.StringTable stringTable_;
    public boolean hasStringTable() { return hasStringTable; }
    public net.osmand.binary.OsmandOdb.StringTable getStringTable() { return stringTable_; }
    
    // optional uint64 baseId = 6;
    public static final int BASEID_FIELD_NUMBER = 6;
    private boolean hasBaseId;
    private long baseId_ = 0L;
    public boolean hasBaseId() { return hasBaseId; }
    public long getBaseId() { return baseId_; }
    
    // repeated .MapTree subtrees = 7;
    public static final int SUBTREES_FIELD_NUMBER = 7;
    private java.util.List<net.osmand.binary.OsmandOdb.MapTree> subtrees_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.MapTree> getSubtreesList() {
      return subtrees_;
    }
    public int getSubtreesCount() { return subtrees_.size(); }
    public net.osmand.binary.OsmandOdb.MapTree getSubtrees(int index) {
      return subtrees_.get(index);
    }
    
    // repeated .MapData leafs = 8;
    public static final int LEAFS_FIELD_NUMBER = 8;
    private java.util.List<net.osmand.binary.OsmandOdb.MapData> leafs_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.MapData> getLeafsList() {
      return leafs_;
    }
    public int getLeafsCount() { return leafs_.size(); }
    public net.osmand.binary.OsmandOdb.MapData getLeafs(int index) {
      return leafs_.get(index);
    }
    
    private void initFields() {
      stringTable_ = net.osmand.binary.OsmandOdb.StringTable.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasLeft) return false;
      if (!hasRight) return false;
      if (!hasTop) return false;
      if (!hasBottom) return false;
      for (net.osmand.binary.OsmandOdb.MapTree element : getSubtreesList()) {
        if (!element.isInitialized()) return false;
      }
      for (net.osmand.binary.OsmandOdb.MapData element : getLeafsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasLeft()) {
        output.writeSInt32(1, getLeft());
      }
      if (hasRight()) {
        output.writeSInt32(2, getRight());
      }
      if (hasTop()) {
        output.writeSInt32(3, getTop());
      }
      if (hasBottom()) {
        output.writeSInt32(4, getBottom());
      }
      if (hasStringTable()) {
        output.writeMessage(5, getStringTable());
      }
      if (hasBaseId()) {
        output.writeUInt64(6, getBaseId());
      }
      for (net.osmand.binary.OsmandOdb.MapTree element : getSubtreesList()) {
        output.writeMessage(7, element);
      }
      for (net.osmand.binary.OsmandOdb.MapData element : getLeafsList()) {
        output.writeMessage(8, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasLeft()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, getLeft());
      }
      if (hasRight()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, getRight());
      }
      if (hasTop()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, getTop());
      }
      if (hasBottom()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, getBottom());
      }
      if (hasStringTable()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getStringTable());
      }
      if (hasBaseId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, getBaseId());
      }
      for (net.osmand.binary.OsmandOdb.MapTree element : getSubtreesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, element);
      }
      for (net.osmand.binary.OsmandOdb.MapData element : getLeafsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.MapTree parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapTree parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapTree parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapTree parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapTree parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapTree parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapTree parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.MapTree parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.MapTree parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapTree parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.MapTree prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.MapTree result;
      
      // Construct using net.osmand.binary.OsmandOdb.MapTree.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.MapTree();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.MapTree internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.MapTree();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.MapTree.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.MapTree getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.MapTree.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.MapTree build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.MapTree buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.MapTree buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.subtrees_ != java.util.Collections.EMPTY_LIST) {
          result.subtrees_ =
            java.util.Collections.unmodifiableList(result.subtrees_);
        }
        if (result.leafs_ != java.util.Collections.EMPTY_LIST) {
          result.leafs_ =
            java.util.Collections.unmodifiableList(result.leafs_);
        }
        net.osmand.binary.OsmandOdb.MapTree returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.MapTree) {
          return mergeFrom((net.osmand.binary.OsmandOdb.MapTree)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.MapTree other) {
        if (other == net.osmand.binary.OsmandOdb.MapTree.getDefaultInstance()) return this;
        if (other.hasLeft()) {
          setLeft(other.getLeft());
        }
        if (other.hasRight()) {
          setRight(other.getRight());
        }
        if (other.hasTop()) {
          setTop(other.getTop());
        }
        if (other.hasBottom()) {
          setBottom(other.getBottom());
        }
        if (other.hasStringTable()) {
          mergeStringTable(other.getStringTable());
        }
        if (other.hasBaseId()) {
          setBaseId(other.getBaseId());
        }
        if (!other.subtrees_.isEmpty()) {
          if (result.subtrees_.isEmpty()) {
            result.subtrees_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapTree>();
          }
          result.subtrees_.addAll(other.subtrees_);
        }
        if (!other.leafs_.isEmpty()) {
          if (result.leafs_.isEmpty()) {
            result.leafs_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapData>();
          }
          result.leafs_.addAll(other.leafs_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setLeft(input.readSInt32());
              break;
            }
            case 16: {
              setRight(input.readSInt32());
              break;
            }
            case 24: {
              setTop(input.readSInt32());
              break;
            }
            case 32: {
              setBottom(input.readSInt32());
              break;
            }
            case 42: {
              net.osmand.binary.OsmandOdb.StringTable.Builder subBuilder = net.osmand.binary.OsmandOdb.StringTable.newBuilder();
              if (hasStringTable()) {
                subBuilder.mergeFrom(getStringTable());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setStringTable(subBuilder.buildPartial());
              break;
            }
            case 48: {
              setBaseId(input.readUInt64());
              break;
            }
            case 58: {
              net.osmand.binary.OsmandOdb.MapTree.Builder subBuilder = net.osmand.binary.OsmandOdb.MapTree.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addSubtrees(subBuilder.buildPartial());
              break;
            }
            case 66: {
              net.osmand.binary.OsmandOdb.MapData.Builder subBuilder = net.osmand.binary.OsmandOdb.MapData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addLeafs(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required sint32 left = 1;
      public boolean hasLeft() {
        return result.hasLeft();
      }
      public int getLeft() {
        return result.getLeft();
      }
      public Builder setLeft(int value) {
        result.hasLeft = true;
        result.left_ = value;
        return this;
      }
      public Builder clearLeft() {
        result.hasLeft = false;
        result.left_ = 0;
        return this;
      }
      
      // required sint32 right = 2;
      public boolean hasRight() {
        return result.hasRight();
      }
      public int getRight() {
        return result.getRight();
      }
      public Builder setRight(int value) {
        result.hasRight = true;
        result.right_ = value;
        return this;
      }
      public Builder clearRight() {
        result.hasRight = false;
        result.right_ = 0;
        return this;
      }
      
      // required sint32 top = 3;
      public boolean hasTop() {
        return result.hasTop();
      }
      public int getTop() {
        return result.getTop();
      }
      public Builder setTop(int value) {
        result.hasTop = true;
        result.top_ = value;
        return this;
      }
      public Builder clearTop() {
        result.hasTop = false;
        result.top_ = 0;
        return this;
      }
      
      // required sint32 bottom = 4;
      public boolean hasBottom() {
        return result.hasBottom();
      }
      public int getBottom() {
        return result.getBottom();
      }
      public Builder setBottom(int value) {
        result.hasBottom = true;
        result.bottom_ = value;
        return this;
      }
      public Builder clearBottom() {
        result.hasBottom = false;
        result.bottom_ = 0;
        return this;
      }
      
      // optional .StringTable stringTable = 5;
      public boolean hasStringTable() {
        return result.hasStringTable();
      }
      public net.osmand.binary.OsmandOdb.StringTable getStringTable() {
        return result.getStringTable();
      }
      public Builder setStringTable(net.osmand.binary.OsmandOdb.StringTable value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasStringTable = true;
        result.stringTable_ = value;
        return this;
      }
      public Builder setStringTable(net.osmand.binary.OsmandOdb.StringTable.Builder builderForValue) {
        result.hasStringTable = true;
        result.stringTable_ = builderForValue.build();
        return this;
      }
      public Builder mergeStringTable(net.osmand.binary.OsmandOdb.StringTable value) {
        if (result.hasStringTable() &&
            result.stringTable_ != net.osmand.binary.OsmandOdb.StringTable.getDefaultInstance()) {
          result.stringTable_ =
            net.osmand.binary.OsmandOdb.StringTable.newBuilder(result.stringTable_).mergeFrom(value).buildPartial();
        } else {
          result.stringTable_ = value;
        }
        result.hasStringTable = true;
        return this;
      }
      public Builder clearStringTable() {
        result.hasStringTable = false;
        result.stringTable_ = net.osmand.binary.OsmandOdb.StringTable.getDefaultInstance();
        return this;
      }
      
      // optional uint64 baseId = 6;
      public boolean hasBaseId() {
        return result.hasBaseId();
      }
      public long getBaseId() {
        return result.getBaseId();
      }
      public Builder setBaseId(long value) {
        result.hasBaseId = true;
        result.baseId_ = value;
        return this;
      }
      public Builder clearBaseId() {
        result.hasBaseId = false;
        result.baseId_ = 0L;
        return this;
      }
      
      // repeated .MapTree subtrees = 7;
      public java.util.List<net.osmand.binary.OsmandOdb.MapTree> getSubtreesList() {
        return java.util.Collections.unmodifiableList(result.subtrees_);
      }
      public int getSubtreesCount() {
        return result.getSubtreesCount();
      }
      public net.osmand.binary.OsmandOdb.MapTree getSubtrees(int index) {
        return result.getSubtrees(index);
      }
      public Builder setSubtrees(int index, net.osmand.binary.OsmandOdb.MapTree value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.subtrees_.set(index, value);
        return this;
      }
      public Builder setSubtrees(int index, net.osmand.binary.OsmandOdb.MapTree.Builder builderForValue) {
        result.subtrees_.set(index, builderForValue.build());
        return this;
      }
      public Builder addSubtrees(net.osmand.binary.OsmandOdb.MapTree value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.subtrees_.isEmpty()) {
          result.subtrees_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapTree>();
        }
        result.subtrees_.add(value);
        return this;
      }
      public Builder addSubtrees(net.osmand.binary.OsmandOdb.MapTree.Builder builderForValue) {
        if (result.subtrees_.isEmpty()) {
          result.subtrees_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapTree>();
        }
        result.subtrees_.add(builderForValue.build());
        return this;
      }
      public Builder addAllSubtrees(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.MapTree> values) {
        if (result.subtrees_.isEmpty()) {
          result.subtrees_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapTree>();
        }
        super.addAll(values, result.subtrees_);
        return this;
      }
      public Builder clearSubtrees() {
        result.subtrees_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .MapData leafs = 8;
      public java.util.List<net.osmand.binary.OsmandOdb.MapData> getLeafsList() {
        return java.util.Collections.unmodifiableList(result.leafs_);
      }
      public int getLeafsCount() {
        return result.getLeafsCount();
      }
      public net.osmand.binary.OsmandOdb.MapData getLeafs(int index) {
        return result.getLeafs(index);
      }
      public Builder setLeafs(int index, net.osmand.binary.OsmandOdb.MapData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.leafs_.set(index, value);
        return this;
      }
      public Builder setLeafs(int index, net.osmand.binary.OsmandOdb.MapData.Builder builderForValue) {
        result.leafs_.set(index, builderForValue.build());
        return this;
      }
      public Builder addLeafs(net.osmand.binary.OsmandOdb.MapData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.leafs_.isEmpty()) {
          result.leafs_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapData>();
        }
        result.leafs_.add(value);
        return this;
      }
      public Builder addLeafs(net.osmand.binary.OsmandOdb.MapData.Builder builderForValue) {
        if (result.leafs_.isEmpty()) {
          result.leafs_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapData>();
        }
        result.leafs_.add(builderForValue.build());
        return this;
      }
      public Builder addAllLeafs(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.MapData> values) {
        if (result.leafs_.isEmpty()) {
          result.leafs_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapData>();
        }
        super.addAll(values, result.leafs_);
        return this;
      }
      public Builder clearLeafs() {
        result.leafs_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:MapTree)
    }
    
    static {
      defaultInstance = new MapTree(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:MapTree)
  }
  
  public static final class StringTable extends
      com.google.protobuf.GeneratedMessage {
    // Use StringTable.newBuilder() to construct.
    private StringTable() {
      initFields();
    }
    private StringTable(boolean noInit) {}
    
    private static final StringTable defaultInstance;
    public static StringTable getDefaultInstance() {
      return defaultInstance;
    }
    
    public StringTable getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_StringTable_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_StringTable_fieldAccessorTable;
    }
    
    // repeated string s = 1;
    public static final int S_FIELD_NUMBER = 1;
    private java.util.List<java.lang.String> s_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getSList() {
      return s_;
    }
    public int getSCount() { return s_.size(); }
    public java.lang.String getS(int index) {
      return s_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (java.lang.String element : getSList()) {
        output.writeString(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        for (java.lang.String element : getSList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getSList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.StringTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StringTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StringTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StringTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StringTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StringTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StringTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.StringTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.StringTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StringTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.StringTable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.StringTable result;
      
      // Construct using net.osmand.binary.OsmandOdb.StringTable.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.StringTable();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.StringTable internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.StringTable();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.StringTable.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.StringTable getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.StringTable.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.StringTable build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.StringTable buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.StringTable buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.s_ != java.util.Collections.EMPTY_LIST) {
          result.s_ =
            java.util.Collections.unmodifiableList(result.s_);
        }
        net.osmand.binary.OsmandOdb.StringTable returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.StringTable) {
          return mergeFrom((net.osmand.binary.OsmandOdb.StringTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.StringTable other) {
        if (other == net.osmand.binary.OsmandOdb.StringTable.getDefaultInstance()) return this;
        if (!other.s_.isEmpty()) {
          if (result.s_.isEmpty()) {
            result.s_ = new java.util.ArrayList<java.lang.String>();
          }
          result.s_.addAll(other.s_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              addS(input.readString());
              break;
            }
          }
        }
      }
      
      
      // repeated string s = 1;
      public java.util.List<java.lang.String> getSList() {
        return java.util.Collections.unmodifiableList(result.s_);
      }
      public int getSCount() {
        return result.getSCount();
      }
      public java.lang.String getS(int index) {
        return result.getS(index);
      }
      public Builder setS(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.s_.set(index, value);
        return this;
      }
      public Builder addS(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.s_.isEmpty()) {
          result.s_ = new java.util.ArrayList<java.lang.String>();
        }
        result.s_.add(value);
        return this;
      }
      public Builder addAllS(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.s_.isEmpty()) {
          result.s_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.s_);
        return this;
      }
      public Builder clearS() {
        result.s_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:StringTable)
    }
    
    static {
      defaultInstance = new StringTable(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:StringTable)
  }
  
  public static final class MapData extends
      com.google.protobuf.GeneratedMessage {
    // Use MapData.newBuilder() to construct.
    private MapData() {
      initFields();
    }
    private MapData(boolean noInit) {}
    
    private static final MapData defaultInstance;
    public static MapData getDefaultInstance() {
      return defaultInstance;
    }
    
    public MapData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_MapData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_MapData_fieldAccessorTable;
    }
    
    // required bytes coordinates = 1;
    public static final int COORDINATES_FIELD_NUMBER = 1;
    private boolean hasCoordinates;
    private com.google.protobuf.ByteString coordinates_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasCoordinates() { return hasCoordinates; }
    public com.google.protobuf.ByteString getCoordinates() { return coordinates_; }
    
    // required bytes types = 2;
    public static final int TYPES_FIELD_NUMBER = 2;
    private boolean hasTypes;
    private com.google.protobuf.ByteString types_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasTypes() { return hasTypes; }
    public com.google.protobuf.ByteString getTypes() { return types_; }
    
    // required sint64 id = 3;
    public static final int ID_FIELD_NUMBER = 3;
    private boolean hasId;
    private long id_ = 0L;
    public boolean hasId() { return hasId; }
    public long getId() { return id_; }
    
    // optional uint32 stringId = 4;
    public static final int STRINGID_FIELD_NUMBER = 4;
    private boolean hasStringId;
    private int stringId_ = 0;
    public boolean hasStringId() { return hasStringId; }
    public int getStringId() { return stringId_; }
    
    // optional bytes restrictions = 5;
    public static final int RESTRICTIONS_FIELD_NUMBER = 5;
    private boolean hasRestrictions;
    private com.google.protobuf.ByteString restrictions_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasRestrictions() { return hasRestrictions; }
    public com.google.protobuf.ByteString getRestrictions() { return restrictions_; }
    
    // optional int32 highwayMeta = 6;
    public static final int HIGHWAYMETA_FIELD_NUMBER = 6;
    private boolean hasHighwayMeta;
    private int highwayMeta_ = 0;
    public boolean hasHighwayMeta() { return hasHighwayMeta; }
    public int getHighwayMeta() { return highwayMeta_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasCoordinates) return false;
      if (!hasTypes) return false;
      if (!hasId) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCoordinates()) {
        output.writeBytes(1, getCoordinates());
      }
      if (hasTypes()) {
        output.writeBytes(2, getTypes());
      }
      if (hasId()) {
        output.writeSInt64(3, getId());
      }
      if (hasStringId()) {
        output.writeUInt32(4, getStringId());
      }
      if (hasRestrictions()) {
        output.writeBytes(5, getRestrictions());
      }
      if (hasHighwayMeta()) {
        output.writeInt32(6, getHighwayMeta());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCoordinates()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getCoordinates());
      }
      if (hasTypes()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTypes());
      }
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(3, getId());
      }
      if (hasStringId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, getStringId());
      }
      if (hasRestrictions()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getRestrictions());
      }
      if (hasHighwayMeta()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getHighwayMeta());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.MapData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.MapData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.MapData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.MapData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.MapData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.MapData result;
      
      // Construct using net.osmand.binary.OsmandOdb.MapData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.MapData();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.MapData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.MapData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.MapData.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.MapData getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.MapData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.MapData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.MapData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.MapData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        net.osmand.binary.OsmandOdb.MapData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.MapData) {
          return mergeFrom((net.osmand.binary.OsmandOdb.MapData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.MapData other) {
        if (other == net.osmand.binary.OsmandOdb.MapData.getDefaultInstance()) return this;
        if (other.hasCoordinates()) {
          setCoordinates(other.getCoordinates());
        }
        if (other.hasTypes()) {
          setTypes(other.getTypes());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasStringId()) {
          setStringId(other.getStringId());
        }
        if (other.hasRestrictions()) {
          setRestrictions(other.getRestrictions());
        }
        if (other.hasHighwayMeta()) {
          setHighwayMeta(other.getHighwayMeta());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setCoordinates(input.readBytes());
              break;
            }
            case 18: {
              setTypes(input.readBytes());
              break;
            }
            case 24: {
              setId(input.readSInt64());
              break;
            }
            case 32: {
              setStringId(input.readUInt32());
              break;
            }
            case 42: {
              setRestrictions(input.readBytes());
              break;
            }
            case 48: {
              setHighwayMeta(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // required bytes coordinates = 1;
      public boolean hasCoordinates() {
        return result.hasCoordinates();
      }
      public com.google.protobuf.ByteString getCoordinates() {
        return result.getCoordinates();
      }
      public Builder setCoordinates(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasCoordinates = true;
        result.coordinates_ = value;
        return this;
      }
      public Builder clearCoordinates() {
        result.hasCoordinates = false;
        result.coordinates_ = getDefaultInstance().getCoordinates();
        return this;
      }
      
      // required bytes types = 2;
      public boolean hasTypes() {
        return result.hasTypes();
      }
      public com.google.protobuf.ByteString getTypes() {
        return result.getTypes();
      }
      public Builder setTypes(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTypes = true;
        result.types_ = value;
        return this;
      }
      public Builder clearTypes() {
        result.hasTypes = false;
        result.types_ = getDefaultInstance().getTypes();
        return this;
      }
      
      // required sint64 id = 3;
      public boolean hasId() {
        return result.hasId();
      }
      public long getId() {
        return result.getId();
      }
      public Builder setId(long value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
      
      // optional uint32 stringId = 4;
      public boolean hasStringId() {
        return result.hasStringId();
      }
      public int getStringId() {
        return result.getStringId();
      }
      public Builder setStringId(int value) {
        result.hasStringId = true;
        result.stringId_ = value;
        return this;
      }
      public Builder clearStringId() {
        result.hasStringId = false;
        result.stringId_ = 0;
        return this;
      }
      
      // optional bytes restrictions = 5;
      public boolean hasRestrictions() {
        return result.hasRestrictions();
      }
      public com.google.protobuf.ByteString getRestrictions() {
        return result.getRestrictions();
      }
      public Builder setRestrictions(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRestrictions = true;
        result.restrictions_ = value;
        return this;
      }
      public Builder clearRestrictions() {
        result.hasRestrictions = false;
        result.restrictions_ = getDefaultInstance().getRestrictions();
        return this;
      }
      
      // optional int32 highwayMeta = 6;
      public boolean hasHighwayMeta() {
        return result.hasHighwayMeta();
      }
      public int getHighwayMeta() {
        return result.getHighwayMeta();
      }
      public Builder setHighwayMeta(int value) {
        result.hasHighwayMeta = true;
        result.highwayMeta_ = value;
        return this;
      }
      public Builder clearHighwayMeta() {
        result.hasHighwayMeta = false;
        result.highwayMeta_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:MapData)
    }
    
    static {
      defaultInstance = new MapData(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:MapData)
  }
  
  public static final class OsmAndAddressIndex extends
      com.google.protobuf.GeneratedMessage {
    // Use OsmAndAddressIndex.newBuilder() to construct.
    private OsmAndAddressIndex() {
      initFields();
    }
    private OsmAndAddressIndex(boolean noInit) {}
    
    private static final OsmAndAddressIndex defaultInstance;
    public static OsmAndAddressIndex getDefaultInstance() {
      return defaultInstance;
    }
    
    public OsmAndAddressIndex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_OsmAndAddressIndex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_OsmAndAddressIndex_fieldAccessorTable;
    }
    
    // required string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // optional string name_en = 2;
    public static final int NAME_EN_FIELD_NUMBER = 2;
    private boolean hasNameEn;
    private java.lang.String nameEn_ = "";
    public boolean hasNameEn() { return hasNameEn; }
    public java.lang.String getNameEn() { return nameEn_; }
    
    // optional .CitiesIndex cities = 5;
    public static final int CITIES_FIELD_NUMBER = 5;
    private boolean hasCities;
    private net.osmand.binary.OsmandOdb.CitiesIndex cities_;
    public boolean hasCities() { return hasCities; }
    public net.osmand.binary.OsmandOdb.CitiesIndex getCities() { return cities_; }
    
    // optional .PostcodesIndex postcodes = 6;
    public static final int POSTCODES_FIELD_NUMBER = 6;
    private boolean hasPostcodes;
    private net.osmand.binary.OsmandOdb.PostcodesIndex postcodes_;
    public boolean hasPostcodes() { return hasPostcodes; }
    public net.osmand.binary.OsmandOdb.PostcodesIndex getPostcodes() { return postcodes_; }
    
    // optional .CitiesIndex villages = 7;
    public static final int VILLAGES_FIELD_NUMBER = 7;
    private boolean hasVillages;
    private net.osmand.binary.OsmandOdb.CitiesIndex villages_;
    public boolean hasVillages() { return hasVillages; }
    public net.osmand.binary.OsmandOdb.CitiesIndex getVillages() { return villages_; }
    
    private void initFields() {
      cities_ = net.osmand.binary.OsmandOdb.CitiesIndex.getDefaultInstance();
      postcodes_ = net.osmand.binary.OsmandOdb.PostcodesIndex.getDefaultInstance();
      villages_ = net.osmand.binary.OsmandOdb.CitiesIndex.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasName) return false;
      if (hasCities()) {
        if (!getCities().isInitialized()) return false;
      }
      if (hasPostcodes()) {
        if (!getPostcodes().isInitialized()) return false;
      }
      if (hasVillages()) {
        if (!getVillages().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      if (hasNameEn()) {
        output.writeString(2, getNameEn());
      }
      if (hasCities()) {
        output.writeMessage(5, getCities());
      }
      if (hasPostcodes()) {
        output.writeMessage(6, getPostcodes());
      }
      if (hasVillages()) {
        output.writeMessage(7, getVillages());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      if (hasNameEn()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getNameEn());
      }
      if (hasCities()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getCities());
      }
      if (hasPostcodes()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getPostcodes());
      }
      if (hasVillages()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getVillages());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.OsmAndAddressIndex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.OsmAndAddressIndex result;
      
      // Construct using net.osmand.binary.OsmandOdb.OsmAndAddressIndex.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.OsmAndAddressIndex();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.OsmAndAddressIndex internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.OsmAndAddressIndex();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.OsmAndAddressIndex.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.OsmAndAddressIndex getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.OsmAndAddressIndex.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.OsmAndAddressIndex build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.OsmAndAddressIndex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.OsmAndAddressIndex buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        net.osmand.binary.OsmandOdb.OsmAndAddressIndex returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.OsmAndAddressIndex) {
          return mergeFrom((net.osmand.binary.OsmandOdb.OsmAndAddressIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.OsmAndAddressIndex other) {
        if (other == net.osmand.binary.OsmandOdb.OsmAndAddressIndex.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasNameEn()) {
          setNameEn(other.getNameEn());
        }
        if (other.hasCities()) {
          mergeCities(other.getCities());
        }
        if (other.hasPostcodes()) {
          mergePostcodes(other.getPostcodes());
        }
        if (other.hasVillages()) {
          mergeVillages(other.getVillages());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 18: {
              setNameEn(input.readString());
              break;
            }
            case 42: {
              net.osmand.binary.OsmandOdb.CitiesIndex.Builder subBuilder = net.osmand.binary.OsmandOdb.CitiesIndex.newBuilder();
              if (hasCities()) {
                subBuilder.mergeFrom(getCities());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCities(subBuilder.buildPartial());
              break;
            }
            case 50: {
              net.osmand.binary.OsmandOdb.PostcodesIndex.Builder subBuilder = net.osmand.binary.OsmandOdb.PostcodesIndex.newBuilder();
              if (hasPostcodes()) {
                subBuilder.mergeFrom(getPostcodes());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPostcodes(subBuilder.buildPartial());
              break;
            }
            case 58: {
              net.osmand.binary.OsmandOdb.CitiesIndex.Builder subBuilder = net.osmand.binary.OsmandOdb.CitiesIndex.newBuilder();
              if (hasVillages()) {
                subBuilder.mergeFrom(getVillages());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setVillages(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required string name = 1;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // optional string name_en = 2;
      public boolean hasNameEn() {
        return result.hasNameEn();
      }
      public java.lang.String getNameEn() {
        return result.getNameEn();
      }
      public Builder setNameEn(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasNameEn = true;
        result.nameEn_ = value;
        return this;
      }
      public Builder clearNameEn() {
        result.hasNameEn = false;
        result.nameEn_ = getDefaultInstance().getNameEn();
        return this;
      }
      
      // optional .CitiesIndex cities = 5;
      public boolean hasCities() {
        return result.hasCities();
      }
      public net.osmand.binary.OsmandOdb.CitiesIndex getCities() {
        return result.getCities();
      }
      public Builder setCities(net.osmand.binary.OsmandOdb.CitiesIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCities = true;
        result.cities_ = value;
        return this;
      }
      public Builder setCities(net.osmand.binary.OsmandOdb.CitiesIndex.Builder builderForValue) {
        result.hasCities = true;
        result.cities_ = builderForValue.build();
        return this;
      }
      public Builder mergeCities(net.osmand.binary.OsmandOdb.CitiesIndex value) {
        if (result.hasCities() &&
            result.cities_ != net.osmand.binary.OsmandOdb.CitiesIndex.getDefaultInstance()) {
          result.cities_ =
            net.osmand.binary.OsmandOdb.CitiesIndex.newBuilder(result.cities_).mergeFrom(value).buildPartial();
        } else {
          result.cities_ = value;
        }
        result.hasCities = true;
        return this;
      }
      public Builder clearCities() {
        result.hasCities = false;
        result.cities_ = net.osmand.binary.OsmandOdb.CitiesIndex.getDefaultInstance();
        return this;
      }
      
      // optional .PostcodesIndex postcodes = 6;
      public boolean hasPostcodes() {
        return result.hasPostcodes();
      }
      public net.osmand.binary.OsmandOdb.PostcodesIndex getPostcodes() {
        return result.getPostcodes();
      }
      public Builder setPostcodes(net.osmand.binary.OsmandOdb.PostcodesIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasPostcodes = true;
        result.postcodes_ = value;
        return this;
      }
      public Builder setPostcodes(net.osmand.binary.OsmandOdb.PostcodesIndex.Builder builderForValue) {
        result.hasPostcodes = true;
        result.postcodes_ = builderForValue.build();
        return this;
      }
      public Builder mergePostcodes(net.osmand.binary.OsmandOdb.PostcodesIndex value) {
        if (result.hasPostcodes() &&
            result.postcodes_ != net.osmand.binary.OsmandOdb.PostcodesIndex.getDefaultInstance()) {
          result.postcodes_ =
            net.osmand.binary.OsmandOdb.PostcodesIndex.newBuilder(result.postcodes_).mergeFrom(value).buildPartial();
        } else {
          result.postcodes_ = value;
        }
        result.hasPostcodes = true;
        return this;
      }
      public Builder clearPostcodes() {
        result.hasPostcodes = false;
        result.postcodes_ = net.osmand.binary.OsmandOdb.PostcodesIndex.getDefaultInstance();
        return this;
      }
      
      // optional .CitiesIndex villages = 7;
      public boolean hasVillages() {
        return result.hasVillages();
      }
      public net.osmand.binary.OsmandOdb.CitiesIndex getVillages() {
        return result.getVillages();
      }
      public Builder setVillages(net.osmand.binary.OsmandOdb.CitiesIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasVillages = true;
        result.villages_ = value;
        return this;
      }
      public Builder setVillages(net.osmand.binary.OsmandOdb.CitiesIndex.Builder builderForValue) {
        result.hasVillages = true;
        result.villages_ = builderForValue.build();
        return this;
      }
      public Builder mergeVillages(net.osmand.binary.OsmandOdb.CitiesIndex value) {
        if (result.hasVillages() &&
            result.villages_ != net.osmand.binary.OsmandOdb.CitiesIndex.getDefaultInstance()) {
          result.villages_ =
            net.osmand.binary.OsmandOdb.CitiesIndex.newBuilder(result.villages_).mergeFrom(value).buildPartial();
        } else {
          result.villages_ = value;
        }
        result.hasVillages = true;
        return this;
      }
      public Builder clearVillages() {
        result.hasVillages = false;
        result.villages_ = net.osmand.binary.OsmandOdb.CitiesIndex.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:OsmAndAddressIndex)
    }
    
    static {
      defaultInstance = new OsmAndAddressIndex(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:OsmAndAddressIndex)
  }
  
  public static final class CitiesIndex extends
      com.google.protobuf.GeneratedMessage {
    // Use CitiesIndex.newBuilder() to construct.
    private CitiesIndex() {
      initFields();
    }
    private CitiesIndex(boolean noInit) {}
    
    private static final CitiesIndex defaultInstance;
    public static CitiesIndex getDefaultInstance() {
      return defaultInstance;
    }
    
    public CitiesIndex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_CitiesIndex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_CitiesIndex_fieldAccessorTable;
    }
    
    // repeated .CityIndex cities = 1;
    public static final int CITIES_FIELD_NUMBER = 1;
    private java.util.List<net.osmand.binary.OsmandOdb.CityIndex> cities_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.CityIndex> getCitiesList() {
      return cities_;
    }
    public int getCitiesCount() { return cities_.size(); }
    public net.osmand.binary.OsmandOdb.CityIndex getCities(int index) {
      return cities_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (net.osmand.binary.OsmandOdb.CityIndex element : getCitiesList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (net.osmand.binary.OsmandOdb.CityIndex element : getCitiesList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (net.osmand.binary.OsmandOdb.CityIndex element : getCitiesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.CitiesIndex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CitiesIndex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CitiesIndex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CitiesIndex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CitiesIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CitiesIndex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CitiesIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.CitiesIndex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.CitiesIndex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CitiesIndex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.CitiesIndex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.CitiesIndex result;
      
      // Construct using net.osmand.binary.OsmandOdb.CitiesIndex.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.CitiesIndex();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.CitiesIndex internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.CitiesIndex();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.CitiesIndex.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.CitiesIndex getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.CitiesIndex.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.CitiesIndex build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.CitiesIndex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.CitiesIndex buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.cities_ != java.util.Collections.EMPTY_LIST) {
          result.cities_ =
            java.util.Collections.unmodifiableList(result.cities_);
        }
        net.osmand.binary.OsmandOdb.CitiesIndex returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.CitiesIndex) {
          return mergeFrom((net.osmand.binary.OsmandOdb.CitiesIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.CitiesIndex other) {
        if (other == net.osmand.binary.OsmandOdb.CitiesIndex.getDefaultInstance()) return this;
        if (!other.cities_.isEmpty()) {
          if (result.cities_.isEmpty()) {
            result.cities_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.CityIndex>();
          }
          result.cities_.addAll(other.cities_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              net.osmand.binary.OsmandOdb.CityIndex.Builder subBuilder = net.osmand.binary.OsmandOdb.CityIndex.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addCities(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .CityIndex cities = 1;
      public java.util.List<net.osmand.binary.OsmandOdb.CityIndex> getCitiesList() {
        return java.util.Collections.unmodifiableList(result.cities_);
      }
      public int getCitiesCount() {
        return result.getCitiesCount();
      }
      public net.osmand.binary.OsmandOdb.CityIndex getCities(int index) {
        return result.getCities(index);
      }
      public Builder setCities(int index, net.osmand.binary.OsmandOdb.CityIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.cities_.set(index, value);
        return this;
      }
      public Builder setCities(int index, net.osmand.binary.OsmandOdb.CityIndex.Builder builderForValue) {
        result.cities_.set(index, builderForValue.build());
        return this;
      }
      public Builder addCities(net.osmand.binary.OsmandOdb.CityIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.cities_.isEmpty()) {
          result.cities_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.CityIndex>();
        }
        result.cities_.add(value);
        return this;
      }
      public Builder addCities(net.osmand.binary.OsmandOdb.CityIndex.Builder builderForValue) {
        if (result.cities_.isEmpty()) {
          result.cities_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.CityIndex>();
        }
        result.cities_.add(builderForValue.build());
        return this;
      }
      public Builder addAllCities(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.CityIndex> values) {
        if (result.cities_.isEmpty()) {
          result.cities_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.CityIndex>();
        }
        super.addAll(values, result.cities_);
        return this;
      }
      public Builder clearCities() {
        result.cities_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:CitiesIndex)
    }
    
    static {
      defaultInstance = new CitiesIndex(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:CitiesIndex)
  }
  
  public static final class PostcodesIndex extends
      com.google.protobuf.GeneratedMessage {
    // Use PostcodesIndex.newBuilder() to construct.
    private PostcodesIndex() {
      initFields();
    }
    private PostcodesIndex(boolean noInit) {}
    
    private static final PostcodesIndex defaultInstance;
    public static PostcodesIndex getDefaultInstance() {
      return defaultInstance;
    }
    
    public PostcodesIndex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_PostcodesIndex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_PostcodesIndex_fieldAccessorTable;
    }
    
    // repeated .PostcodeIndex postcodes = 1;
    public static final int POSTCODES_FIELD_NUMBER = 1;
    private java.util.List<net.osmand.binary.OsmandOdb.PostcodeIndex> postcodes_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.PostcodeIndex> getPostcodesList() {
      return postcodes_;
    }
    public int getPostcodesCount() { return postcodes_.size(); }
    public net.osmand.binary.OsmandOdb.PostcodeIndex getPostcodes(int index) {
      return postcodes_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (net.osmand.binary.OsmandOdb.PostcodeIndex element : getPostcodesList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (net.osmand.binary.OsmandOdb.PostcodeIndex element : getPostcodesList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (net.osmand.binary.OsmandOdb.PostcodeIndex element : getPostcodesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.PostcodesIndex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodesIndex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodesIndex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodesIndex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodesIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodesIndex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodesIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.PostcodesIndex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.PostcodesIndex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodesIndex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.PostcodesIndex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.PostcodesIndex result;
      
      // Construct using net.osmand.binary.OsmandOdb.PostcodesIndex.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.PostcodesIndex();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.PostcodesIndex internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.PostcodesIndex();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.PostcodesIndex.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.PostcodesIndex getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.PostcodesIndex.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.PostcodesIndex build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.PostcodesIndex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.PostcodesIndex buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.postcodes_ != java.util.Collections.EMPTY_LIST) {
          result.postcodes_ =
            java.util.Collections.unmodifiableList(result.postcodes_);
        }
        net.osmand.binary.OsmandOdb.PostcodesIndex returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.PostcodesIndex) {
          return mergeFrom((net.osmand.binary.OsmandOdb.PostcodesIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.PostcodesIndex other) {
        if (other == net.osmand.binary.OsmandOdb.PostcodesIndex.getDefaultInstance()) return this;
        if (!other.postcodes_.isEmpty()) {
          if (result.postcodes_.isEmpty()) {
            result.postcodes_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.PostcodeIndex>();
          }
          result.postcodes_.addAll(other.postcodes_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              net.osmand.binary.OsmandOdb.PostcodeIndex.Builder subBuilder = net.osmand.binary.OsmandOdb.PostcodeIndex.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addPostcodes(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .PostcodeIndex postcodes = 1;
      public java.util.List<net.osmand.binary.OsmandOdb.PostcodeIndex> getPostcodesList() {
        return java.util.Collections.unmodifiableList(result.postcodes_);
      }
      public int getPostcodesCount() {
        return result.getPostcodesCount();
      }
      public net.osmand.binary.OsmandOdb.PostcodeIndex getPostcodes(int index) {
        return result.getPostcodes(index);
      }
      public Builder setPostcodes(int index, net.osmand.binary.OsmandOdb.PostcodeIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.postcodes_.set(index, value);
        return this;
      }
      public Builder setPostcodes(int index, net.osmand.binary.OsmandOdb.PostcodeIndex.Builder builderForValue) {
        result.postcodes_.set(index, builderForValue.build());
        return this;
      }
      public Builder addPostcodes(net.osmand.binary.OsmandOdb.PostcodeIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.postcodes_.isEmpty()) {
          result.postcodes_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.PostcodeIndex>();
        }
        result.postcodes_.add(value);
        return this;
      }
      public Builder addPostcodes(net.osmand.binary.OsmandOdb.PostcodeIndex.Builder builderForValue) {
        if (result.postcodes_.isEmpty()) {
          result.postcodes_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.PostcodeIndex>();
        }
        result.postcodes_.add(builderForValue.build());
        return this;
      }
      public Builder addAllPostcodes(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.PostcodeIndex> values) {
        if (result.postcodes_.isEmpty()) {
          result.postcodes_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.PostcodeIndex>();
        }
        super.addAll(values, result.postcodes_);
        return this;
      }
      public Builder clearPostcodes() {
        result.postcodes_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:PostcodesIndex)
    }
    
    static {
      defaultInstance = new PostcodesIndex(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:PostcodesIndex)
  }
  
  public static final class CityIndex extends
      com.google.protobuf.GeneratedMessage {
    // Use CityIndex.newBuilder() to construct.
    private CityIndex() {
      initFields();
    }
    private CityIndex(boolean noInit) {}
    
    private static final CityIndex defaultInstance;
    public static CityIndex getDefaultInstance() {
      return defaultInstance;
    }
    
    public CityIndex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_CityIndex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_CityIndex_fieldAccessorTable;
    }
    
    // required uint32 city_type = 1;
    public static final int CITY_TYPE_FIELD_NUMBER = 1;
    private boolean hasCityType;
    private int cityType_ = 0;
    public boolean hasCityType() { return hasCityType; }
    public int getCityType() { return cityType_; }
    
    // required string name = 2;
    public static final int NAME_FIELD_NUMBER = 2;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // optional string name_en = 3;
    public static final int NAME_EN_FIELD_NUMBER = 3;
    private boolean hasNameEn;
    private java.lang.String nameEn_ = "";
    public boolean hasNameEn() { return hasNameEn; }
    public java.lang.String getNameEn() { return nameEn_; }
    
    // optional uint64 id = 4;
    public static final int ID_FIELD_NUMBER = 4;
    private boolean hasId;
    private long id_ = 0L;
    public boolean hasId() { return hasId; }
    public long getId() { return id_; }
    
    // required fixed32 x = 5;
    public static final int X_FIELD_NUMBER = 5;
    private boolean hasX;
    private int x_ = 0;
    public boolean hasX() { return hasX; }
    public int getX() { return x_; }
    
    // required fixed32 y = 6;
    public static final int Y_FIELD_NUMBER = 6;
    private boolean hasY;
    private int y_ = 0;
    public boolean hasY() { return hasY; }
    public int getY() { return y_; }
    
    // repeated .StreetIndex streets = 10;
    public static final int STREETS_FIELD_NUMBER = 10;
    private java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> streets_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> getStreetsList() {
      return streets_;
    }
    public int getStreetsCount() { return streets_.size(); }
    public net.osmand.binary.OsmandOdb.StreetIndex getStreets(int index) {
      return streets_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasCityType) return false;
      if (!hasName) return false;
      if (!hasX) return false;
      if (!hasY) return false;
      for (net.osmand.binary.OsmandOdb.StreetIndex element : getStreetsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCityType()) {
        output.writeUInt32(1, getCityType());
      }
      if (hasName()) {
        output.writeString(2, getName());
      }
      if (hasNameEn()) {
        output.writeString(3, getNameEn());
      }
      if (hasId()) {
        output.writeUInt64(4, getId());
      }
      if (hasX()) {
        output.writeFixed32(5, getX());
      }
      if (hasY()) {
        output.writeFixed32(6, getY());
      }
      for (net.osmand.binary.OsmandOdb.StreetIndex element : getStreetsList()) {
        output.writeMessage(10, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCityType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getCityType());
      }
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getName());
      }
      if (hasNameEn()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getNameEn());
      }
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, getId());
      }
      if (hasX()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, getX());
      }
      if (hasY()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, getY());
      }
      for (net.osmand.binary.OsmandOdb.StreetIndex element : getStreetsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.CityIndex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CityIndex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CityIndex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CityIndex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CityIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CityIndex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CityIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.CityIndex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.CityIndex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.CityIndex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.CityIndex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.CityIndex result;
      
      // Construct using net.osmand.binary.OsmandOdb.CityIndex.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.CityIndex();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.CityIndex internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.CityIndex();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.CityIndex.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.CityIndex getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.CityIndex.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.CityIndex build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.CityIndex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.CityIndex buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.streets_ != java.util.Collections.EMPTY_LIST) {
          result.streets_ =
            java.util.Collections.unmodifiableList(result.streets_);
        }
        net.osmand.binary.OsmandOdb.CityIndex returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.CityIndex) {
          return mergeFrom((net.osmand.binary.OsmandOdb.CityIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.CityIndex other) {
        if (other == net.osmand.binary.OsmandOdb.CityIndex.getDefaultInstance()) return this;
        if (other.hasCityType()) {
          setCityType(other.getCityType());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasNameEn()) {
          setNameEn(other.getNameEn());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (!other.streets_.isEmpty()) {
          if (result.streets_.isEmpty()) {
            result.streets_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIndex>();
          }
          result.streets_.addAll(other.streets_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setCityType(input.readUInt32());
              break;
            }
            case 18: {
              setName(input.readString());
              break;
            }
            case 26: {
              setNameEn(input.readString());
              break;
            }
            case 32: {
              setId(input.readUInt64());
              break;
            }
            case 45: {
              setX(input.readFixed32());
              break;
            }
            case 53: {
              setY(input.readFixed32());
              break;
            }
            case 82: {
              net.osmand.binary.OsmandOdb.StreetIndex.Builder subBuilder = net.osmand.binary.OsmandOdb.StreetIndex.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addStreets(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required uint32 city_type = 1;
      public boolean hasCityType() {
        return result.hasCityType();
      }
      public int getCityType() {
        return result.getCityType();
      }
      public Builder setCityType(int value) {
        result.hasCityType = true;
        result.cityType_ = value;
        return this;
      }
      public Builder clearCityType() {
        result.hasCityType = false;
        result.cityType_ = 0;
        return this;
      }
      
      // required string name = 2;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // optional string name_en = 3;
      public boolean hasNameEn() {
        return result.hasNameEn();
      }
      public java.lang.String getNameEn() {
        return result.getNameEn();
      }
      public Builder setNameEn(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasNameEn = true;
        result.nameEn_ = value;
        return this;
      }
      public Builder clearNameEn() {
        result.hasNameEn = false;
        result.nameEn_ = getDefaultInstance().getNameEn();
        return this;
      }
      
      // optional uint64 id = 4;
      public boolean hasId() {
        return result.hasId();
      }
      public long getId() {
        return result.getId();
      }
      public Builder setId(long value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
      
      // required fixed32 x = 5;
      public boolean hasX() {
        return result.hasX();
      }
      public int getX() {
        return result.getX();
      }
      public Builder setX(int value) {
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder clearX() {
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      // required fixed32 y = 6;
      public boolean hasY() {
        return result.hasY();
      }
      public int getY() {
        return result.getY();
      }
      public Builder setY(int value) {
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder clearY() {
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      // repeated .StreetIndex streets = 10;
      public java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> getStreetsList() {
        return java.util.Collections.unmodifiableList(result.streets_);
      }
      public int getStreetsCount() {
        return result.getStreetsCount();
      }
      public net.osmand.binary.OsmandOdb.StreetIndex getStreets(int index) {
        return result.getStreets(index);
      }
      public Builder setStreets(int index, net.osmand.binary.OsmandOdb.StreetIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.streets_.set(index, value);
        return this;
      }
      public Builder setStreets(int index, net.osmand.binary.OsmandOdb.StreetIndex.Builder builderForValue) {
        result.streets_.set(index, builderForValue.build());
        return this;
      }
      public Builder addStreets(net.osmand.binary.OsmandOdb.StreetIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.streets_.isEmpty()) {
          result.streets_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIndex>();
        }
        result.streets_.add(value);
        return this;
      }
      public Builder addStreets(net.osmand.binary.OsmandOdb.StreetIndex.Builder builderForValue) {
        if (result.streets_.isEmpty()) {
          result.streets_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIndex>();
        }
        result.streets_.add(builderForValue.build());
        return this;
      }
      public Builder addAllStreets(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.StreetIndex> values) {
        if (result.streets_.isEmpty()) {
          result.streets_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIndex>();
        }
        super.addAll(values, result.streets_);
        return this;
      }
      public Builder clearStreets() {
        result.streets_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:CityIndex)
    }
    
    static {
      defaultInstance = new CityIndex(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:CityIndex)
  }
  
  public static final class PostcodeIndex extends
      com.google.protobuf.GeneratedMessage {
    // Use PostcodeIndex.newBuilder() to construct.
    private PostcodeIndex() {
      initFields();
    }
    private PostcodeIndex(boolean noInit) {}
    
    private static final PostcodeIndex defaultInstance;
    public static PostcodeIndex getDefaultInstance() {
      return defaultInstance;
    }
    
    public PostcodeIndex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_PostcodeIndex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_PostcodeIndex_fieldAccessorTable;
    }
    
    // required string postcode = 1;
    public static final int POSTCODE_FIELD_NUMBER = 1;
    private boolean hasPostcode;
    private java.lang.String postcode_ = "";
    public boolean hasPostcode() { return hasPostcode; }
    public java.lang.String getPostcode() { return postcode_; }
    
    // required fixed32 x = 2;
    public static final int X_FIELD_NUMBER = 2;
    private boolean hasX;
    private int x_ = 0;
    public boolean hasX() { return hasX; }
    public int getX() { return x_; }
    
    // required fixed32 y = 3;
    public static final int Y_FIELD_NUMBER = 3;
    private boolean hasY;
    private int y_ = 0;
    public boolean hasY() { return hasY; }
    public int getY() { return y_; }
    
    // repeated .StreetIndex streets = 5;
    public static final int STREETS_FIELD_NUMBER = 5;
    private java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> streets_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> getStreetsList() {
      return streets_;
    }
    public int getStreetsCount() { return streets_.size(); }
    public net.osmand.binary.OsmandOdb.StreetIndex getStreets(int index) {
      return streets_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasPostcode) return false;
      if (!hasX) return false;
      if (!hasY) return false;
      for (net.osmand.binary.OsmandOdb.StreetIndex element : getStreetsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasPostcode()) {
        output.writeString(1, getPostcode());
      }
      if (hasX()) {
        output.writeFixed32(2, getX());
      }
      if (hasY()) {
        output.writeFixed32(3, getY());
      }
      for (net.osmand.binary.OsmandOdb.StreetIndex element : getStreetsList()) {
        output.writeMessage(5, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasPostcode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getPostcode());
      }
      if (hasX()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, getX());
      }
      if (hasY()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, getY());
      }
      for (net.osmand.binary.OsmandOdb.StreetIndex element : getStreetsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.PostcodeIndex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodeIndex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodeIndex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodeIndex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodeIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodeIndex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodeIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.PostcodeIndex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.PostcodeIndex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.PostcodeIndex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.PostcodeIndex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.PostcodeIndex result;
      
      // Construct using net.osmand.binary.OsmandOdb.PostcodeIndex.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.PostcodeIndex();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.PostcodeIndex internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.PostcodeIndex();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.PostcodeIndex.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.PostcodeIndex getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.PostcodeIndex.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.PostcodeIndex build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.PostcodeIndex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.PostcodeIndex buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.streets_ != java.util.Collections.EMPTY_LIST) {
          result.streets_ =
            java.util.Collections.unmodifiableList(result.streets_);
        }
        net.osmand.binary.OsmandOdb.PostcodeIndex returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.PostcodeIndex) {
          return mergeFrom((net.osmand.binary.OsmandOdb.PostcodeIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.PostcodeIndex other) {
        if (other == net.osmand.binary.OsmandOdb.PostcodeIndex.getDefaultInstance()) return this;
        if (other.hasPostcode()) {
          setPostcode(other.getPostcode());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (!other.streets_.isEmpty()) {
          if (result.streets_.isEmpty()) {
            result.streets_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIndex>();
          }
          result.streets_.addAll(other.streets_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setPostcode(input.readString());
              break;
            }
            case 21: {
              setX(input.readFixed32());
              break;
            }
            case 29: {
              setY(input.readFixed32());
              break;
            }
            case 42: {
              net.osmand.binary.OsmandOdb.StreetIndex.Builder subBuilder = net.osmand.binary.OsmandOdb.StreetIndex.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addStreets(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required string postcode = 1;
      public boolean hasPostcode() {
        return result.hasPostcode();
      }
      public java.lang.String getPostcode() {
        return result.getPostcode();
      }
      public Builder setPostcode(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasPostcode = true;
        result.postcode_ = value;
        return this;
      }
      public Builder clearPostcode() {
        result.hasPostcode = false;
        result.postcode_ = getDefaultInstance().getPostcode();
        return this;
      }
      
      // required fixed32 x = 2;
      public boolean hasX() {
        return result.hasX();
      }
      public int getX() {
        return result.getX();
      }
      public Builder setX(int value) {
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder clearX() {
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      // required fixed32 y = 3;
      public boolean hasY() {
        return result.hasY();
      }
      public int getY() {
        return result.getY();
      }
      public Builder setY(int value) {
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder clearY() {
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      // repeated .StreetIndex streets = 5;
      public java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> getStreetsList() {
        return java.util.Collections.unmodifiableList(result.streets_);
      }
      public int getStreetsCount() {
        return result.getStreetsCount();
      }
      public net.osmand.binary.OsmandOdb.StreetIndex getStreets(int index) {
        return result.getStreets(index);
      }
      public Builder setStreets(int index, net.osmand.binary.OsmandOdb.StreetIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.streets_.set(index, value);
        return this;
      }
      public Builder setStreets(int index, net.osmand.binary.OsmandOdb.StreetIndex.Builder builderForValue) {
        result.streets_.set(index, builderForValue.build());
        return this;
      }
      public Builder addStreets(net.osmand.binary.OsmandOdb.StreetIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.streets_.isEmpty()) {
          result.streets_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIndex>();
        }
        result.streets_.add(value);
        return this;
      }
      public Builder addStreets(net.osmand.binary.OsmandOdb.StreetIndex.Builder builderForValue) {
        if (result.streets_.isEmpty()) {
          result.streets_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIndex>();
        }
        result.streets_.add(builderForValue.build());
        return this;
      }
      public Builder addAllStreets(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.StreetIndex> values) {
        if (result.streets_.isEmpty()) {
          result.streets_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIndex>();
        }
        super.addAll(values, result.streets_);
        return this;
      }
      public Builder clearStreets() {
        result.streets_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:PostcodeIndex)
    }
    
    static {
      defaultInstance = new PostcodeIndex(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:PostcodeIndex)
  }
  
  public static final class StreetIndex extends
      com.google.protobuf.GeneratedMessage {
    // Use StreetIndex.newBuilder() to construct.
    private StreetIndex() {
      initFields();
    }
    private StreetIndex(boolean noInit) {}
    
    private static final StreetIndex defaultInstance;
    public static StreetIndex getDefaultInstance() {
      return defaultInstance;
    }
    
    public StreetIndex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_StreetIndex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_StreetIndex_fieldAccessorTable;
    }
    
    // required string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // optional string name_en = 2;
    public static final int NAME_EN_FIELD_NUMBER = 2;
    private boolean hasNameEn;
    private java.lang.String nameEn_ = "";
    public boolean hasNameEn() { return hasNameEn; }
    public java.lang.String getNameEn() { return nameEn_; }
    
    // optional uint64 id = 6;
    public static final int ID_FIELD_NUMBER = 6;
    private boolean hasId;
    private long id_ = 0L;
    public boolean hasId() { return hasId; }
    public long getId() { return id_; }
    
    // required sint32 x = 3;
    public static final int X_FIELD_NUMBER = 3;
    private boolean hasX;
    private int x_ = 0;
    public boolean hasX() { return hasX; }
    public int getX() { return x_; }
    
    // required sint32 y = 4;
    public static final int Y_FIELD_NUMBER = 4;
    private boolean hasY;
    private int y_ = 0;
    public boolean hasY() { return hasY; }
    public int getY() { return y_; }
    
    // repeated .BuildingIndex buildings = 10;
    public static final int BUILDINGS_FIELD_NUMBER = 10;
    private java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> buildings_ =
      java.util.Collections.emptyList();
    public java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> getBuildingsList() {
      return buildings_;
    }
    public int getBuildingsCount() { return buildings_.size(); }
    public net.osmand.binary.OsmandOdb.BuildingIndex getBuildings(int index) {
      return buildings_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasName) return false;
      if (!hasX) return false;
      if (!hasY) return false;
      for (net.osmand.binary.OsmandOdb.BuildingIndex element : getBuildingsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      if (hasNameEn()) {
        output.writeString(2, getNameEn());
      }
      if (hasX()) {
        output.writeSInt32(3, getX());
      }
      if (hasY()) {
        output.writeSInt32(4, getY());
      }
      if (hasId()) {
        output.writeUInt64(6, getId());
      }
      for (net.osmand.binary.OsmandOdb.BuildingIndex element : getBuildingsList()) {
        output.writeMessage(10, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      if (hasNameEn()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getNameEn());
      }
      if (hasX()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, getX());
      }
      if (hasY()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, getY());
      }
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, getId());
      }
      for (net.osmand.binary.OsmandOdb.BuildingIndex element : getBuildingsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.StreetIndex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StreetIndex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StreetIndex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StreetIndex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StreetIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StreetIndex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StreetIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.StreetIndex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.StreetIndex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.StreetIndex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.StreetIndex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.StreetIndex result;
      
      // Construct using net.osmand.binary.OsmandOdb.StreetIndex.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.StreetIndex();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.StreetIndex internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.StreetIndex();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.StreetIndex.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.StreetIndex getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.StreetIndex.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.StreetIndex build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.StreetIndex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.StreetIndex buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.buildings_ != java.util.Collections.EMPTY_LIST) {
          result.buildings_ =
            java.util.Collections.unmodifiableList(result.buildings_);
        }
        net.osmand.binary.OsmandOdb.StreetIndex returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.StreetIndex) {
          return mergeFrom((net.osmand.binary.OsmandOdb.StreetIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.StreetIndex other) {
        if (other == net.osmand.binary.OsmandOdb.StreetIndex.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasNameEn()) {
          setNameEn(other.getNameEn());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (!other.buildings_.isEmpty()) {
          if (result.buildings_.isEmpty()) {
            result.buildings_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.BuildingIndex>();
          }
          result.buildings_.addAll(other.buildings_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 18: {
              setNameEn(input.readString());
              break;
            }
            case 24: {
              setX(input.readSInt32());
              break;
            }
            case 32: {
              setY(input.readSInt32());
              break;
            }
            case 48: {
              setId(input.readUInt64());
              break;
            }
            case 82: {
              net.osmand.binary.OsmandOdb.BuildingIndex.Builder subBuilder = net.osmand.binary.OsmandOdb.BuildingIndex.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addBuildings(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required string name = 1;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // optional string name_en = 2;
      public boolean hasNameEn() {
        return result.hasNameEn();
      }
      public java.lang.String getNameEn() {
        return result.getNameEn();
      }
      public Builder setNameEn(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasNameEn = true;
        result.nameEn_ = value;
        return this;
      }
      public Builder clearNameEn() {
        result.hasNameEn = false;
        result.nameEn_ = getDefaultInstance().getNameEn();
        return this;
      }
      
      // optional uint64 id = 6;
      public boolean hasId() {
        return result.hasId();
      }
      public long getId() {
        return result.getId();
      }
      public Builder setId(long value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
      
      // required sint32 x = 3;
      public boolean hasX() {
        return result.hasX();
      }
      public int getX() {
        return result.getX();
      }
      public Builder setX(int value) {
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder clearX() {
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      // required sint32 y = 4;
      public boolean hasY() {
        return result.hasY();
      }
      public int getY() {
        return result.getY();
      }
      public Builder setY(int value) {
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder clearY() {
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      // repeated .BuildingIndex buildings = 10;
      public java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> getBuildingsList() {
        return java.util.Collections.unmodifiableList(result.buildings_);
      }
      public int getBuildingsCount() {
        return result.getBuildingsCount();
      }
      public net.osmand.binary.OsmandOdb.BuildingIndex getBuildings(int index) {
        return result.getBuildings(index);
      }
      public Builder setBuildings(int index, net.osmand.binary.OsmandOdb.BuildingIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.buildings_.set(index, value);
        return this;
      }
      public Builder setBuildings(int index, net.osmand.binary.OsmandOdb.BuildingIndex.Builder builderForValue) {
        result.buildings_.set(index, builderForValue.build());
        return this;
      }
      public Builder addBuildings(net.osmand.binary.OsmandOdb.BuildingIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.buildings_.isEmpty()) {
          result.buildings_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.BuildingIndex>();
        }
        result.buildings_.add(value);
        return this;
      }
      public Builder addBuildings(net.osmand.binary.OsmandOdb.BuildingIndex.Builder builderForValue) {
        if (result.buildings_.isEmpty()) {
          result.buildings_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.BuildingIndex>();
        }
        result.buildings_.add(builderForValue.build());
        return this;
      }
      public Builder addAllBuildings(
          java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.BuildingIndex> values) {
        if (result.buildings_.isEmpty()) {
          result.buildings_ = new java.util.ArrayList<net.osmand.binary.OsmandOdb.BuildingIndex>();
        }
        super.addAll(values, result.buildings_);
        return this;
      }
      public Builder clearBuildings() {
        result.buildings_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:StreetIndex)
    }
    
    static {
      defaultInstance = new StreetIndex(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:StreetIndex)
  }
  
  public static final class BuildingIndex extends
      com.google.protobuf.GeneratedMessage {
    // Use BuildingIndex.newBuilder() to construct.
    private BuildingIndex() {
      initFields();
    }
    private BuildingIndex(boolean noInit) {}
    
    private static final BuildingIndex defaultInstance;
    public static BuildingIndex getDefaultInstance() {
      return defaultInstance;
    }
    
    public BuildingIndex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.osmand.binary.OsmandOdb.internal_static_BuildingIndex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.osmand.binary.OsmandOdb.internal_static_BuildingIndex_fieldAccessorTable;
    }
    
    // required string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // optional string name_en = 2;
    public static final int NAME_EN_FIELD_NUMBER = 2;
    private boolean hasNameEn;
    private java.lang.String nameEn_ = "";
    public boolean hasNameEn() { return hasNameEn; }
    public java.lang.String getNameEn() { return nameEn_; }
    
    // optional uint64 id = 5;
    public static final int ID_FIELD_NUMBER = 5;
    private boolean hasId;
    private long id_ = 0L;
    public boolean hasId() { return hasId; }
    public long getId() { return id_; }
    
    // optional string postcode = 6;
    public static final int POSTCODE_FIELD_NUMBER = 6;
    private boolean hasPostcode;
    private java.lang.String postcode_ = "";
    public boolean hasPostcode() { return hasPostcode; }
    public java.lang.String getPostcode() { return postcode_; }
    
    // required sint32 x = 3;
    public static final int X_FIELD_NUMBER = 3;
    private boolean hasX;
    private int x_ = 0;
    public boolean hasX() { return hasX; }
    public int getX() { return x_; }
    
    // required sint32 y = 4;
    public static final int Y_FIELD_NUMBER = 4;
    private boolean hasY;
    private int y_ = 0;
    public boolean hasY() { return hasY; }
    public int getY() { return y_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasName) return false;
      if (!hasX) return false;
      if (!hasY) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      if (hasNameEn()) {
        output.writeString(2, getNameEn());
      }
      if (hasX()) {
        output.writeSInt32(3, getX());
      }
      if (hasY()) {
        output.writeSInt32(4, getY());
      }
      if (hasId()) {
        output.writeUInt64(5, getId());
      }
      if (hasPostcode()) {
        output.writeString(6, getPostcode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      if (hasNameEn()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getNameEn());
      }
      if (hasX()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, getX());
      }
      if (hasY()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, getY());
      }
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, getId());
      }
      if (hasPostcode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getPostcode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.osmand.binary.OsmandOdb.BuildingIndex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.BuildingIndex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.BuildingIndex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.BuildingIndex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.BuildingIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.BuildingIndex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.BuildingIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.BuildingIndex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.osmand.binary.OsmandOdb.BuildingIndex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.osmand.binary.OsmandOdb.BuildingIndex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.osmand.binary.OsmandOdb.BuildingIndex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.osmand.binary.OsmandOdb.BuildingIndex result;
      
      // Construct using net.osmand.binary.OsmandOdb.BuildingIndex.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.osmand.binary.OsmandOdb.BuildingIndex();
        return builder;
      }
      
      protected net.osmand.binary.OsmandOdb.BuildingIndex internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.osmand.binary.OsmandOdb.BuildingIndex();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.osmand.binary.OsmandOdb.BuildingIndex.getDescriptor();
      }
      
      public net.osmand.binary.OsmandOdb.BuildingIndex getDefaultInstanceForType() {
        return net.osmand.binary.OsmandOdb.BuildingIndex.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.osmand.binary.OsmandOdb.BuildingIndex build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.osmand.binary.OsmandOdb.BuildingIndex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.osmand.binary.OsmandOdb.BuildingIndex buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        net.osmand.binary.OsmandOdb.BuildingIndex returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.osmand.binary.OsmandOdb.BuildingIndex) {
          return mergeFrom((net.osmand.binary.OsmandOdb.BuildingIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.osmand.binary.OsmandOdb.BuildingIndex other) {
        if (other == net.osmand.binary.OsmandOdb.BuildingIndex.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasNameEn()) {
          setNameEn(other.getNameEn());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasPostcode()) {
          setPostcode(other.getPostcode());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 18: {
              setNameEn(input.readString());
              break;
            }
            case 24: {
              setX(input.readSInt32());
              break;
            }
            case 32: {
              setY(input.readSInt32());
              break;
            }
            case 40: {
              setId(input.readUInt64());
              break;
            }
            case 50: {
              setPostcode(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string name = 1;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // optional string name_en = 2;
      public boolean hasNameEn() {
        return result.hasNameEn();
      }
      public java.lang.String getNameEn() {
        return result.getNameEn();
      }
      public Builder setNameEn(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasNameEn = true;
        result.nameEn_ = value;
        return this;
      }
      public Builder clearNameEn() {
        result.hasNameEn = false;
        result.nameEn_ = getDefaultInstance().getNameEn();
        return this;
      }
      
      // optional uint64 id = 5;
      public boolean hasId() {
        return result.hasId();
      }
      public long getId() {
        return result.getId();
      }
      public Builder setId(long value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
      
      // optional string postcode = 6;
      public boolean hasPostcode() {
        return result.hasPostcode();
      }
      public java.lang.String getPostcode() {
        return result.getPostcode();
      }
      public Builder setPostcode(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasPostcode = true;
        result.postcode_ = value;
        return this;
      }
      public Builder clearPostcode() {
        result.hasPostcode = false;
        result.postcode_ = getDefaultInstance().getPostcode();
        return this;
      }
      
      // required sint32 x = 3;
      public boolean hasX() {
        return result.hasX();
      }
      public int getX() {
        return result.getX();
      }
      public Builder setX(int value) {
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder clearX() {
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      // required sint32 y = 4;
      public boolean hasY() {
        return result.hasY();
      }
      public int getY() {
        return result.getY();
      }
      public Builder setY(int value) {
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder clearY() {
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:BuildingIndex)
    }
    
    static {
      defaultInstance = new BuildingIndex(true);
      net.osmand.binary.OsmandOdb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:BuildingIndex)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_OsmAndStructure_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_OsmAndStructure_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_OsmAndMapIndex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_OsmAndMapIndex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MapRootLevel_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MapRootLevel_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MapTree_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MapTree_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_StringTable_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_StringTable_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MapData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MapData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_OsmAndAddressIndex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_OsmAndAddressIndex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CitiesIndex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CitiesIndex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_PostcodesIndex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_PostcodesIndex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CityIndex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CityIndex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_PostcodeIndex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_PostcodeIndex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_StreetIndex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_StreetIndex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_BuildingIndex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_BuildingIndex_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024src/osmand_odb.proto\"\210\001\n\017OsmAndStructu" +
      "re\022\017\n\007version\030\001 \002(\r\022!\n\010mapIndex\030\002 \003(\0132\017." +
      "OsmAndMapIndex\022)\n\014addressIndex\030\003 \003(\0132\023.O" +
      "smAndAddressIndex\022\026\n\016versionConfirm\030  \002(" +
      "\r\"/\n\016OsmAndMapIndex\022\035\n\006levels\030\001 \003(\0132\r.Ma" +
      "pRootLevel\"\202\001\n\014MapRootLevel\022\017\n\007maxZoom\030\001" +
      " \002(\005\022\017\n\007minZoom\030\002 \002(\005\022\014\n\004left\030\003 \002(\005\022\r\n\005r" +
      "ight\030\004 \002(\005\022\013\n\003top\030\005 \002(\005\022\016\n\006bottom\030\006 \002(\005\022" +
      "\026\n\004root\030\007 \003(\0132\010.MapTree\"\253\001\n\007MapTree\022\014\n\004l" +
      "eft\030\001 \002(\021\022\r\n\005right\030\002 \002(\021\022\013\n\003top\030\003 \002(\021\022\016\n",
      "\006bottom\030\004 \002(\021\022!\n\013stringTable\030\005 \001(\0132\014.Str" +
      "ingTable\022\016\n\006baseId\030\006 \001(\004\022\032\n\010subtrees\030\007 \003" +
      "(\0132\010.MapTree\022\027\n\005leafs\030\010 \003(\0132\010.MapData\"\030\n" +
      "\013StringTable\022\t\n\001s\030\001 \003(\t\"v\n\007MapData\022\023\n\013co" +
      "ordinates\030\001 \002(\014\022\r\n\005types\030\002 \002(\014\022\n\n\002id\030\003 \002" +
      "(\022\022\020\n\010stringId\030\004 \001(\r\022\024\n\014restrictions\030\005 \001" +
      "(\014\022\023\n\013highwayMeta\030\006 \001(\005\"\225\001\n\022OsmAndAddres" +
      "sIndex\022\014\n\004name\030\001 \002(\t\022\017\n\007name_en\030\002 \001(\t\022\034\n" +
      "\006cities\030\005 \001(\0132\014.CitiesIndex\022\"\n\tpostcodes" +
      "\030\006 \001(\0132\017.PostcodesIndex\022\036\n\010villages\030\007 \001(",
      "\0132\014.CitiesIndex\")\n\013CitiesIndex\022\032\n\006cities" +
      "\030\001 \003(\0132\n.CityIndex\"3\n\016PostcodesIndex\022!\n\t" +
      "postcodes\030\001 \003(\0132\016.PostcodeIndex\"~\n\tCityI" +
      "ndex\022\021\n\tcity_type\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\017\n" +
      "\007name_en\030\003 \001(\t\022\n\n\002id\030\004 \001(\004\022\t\n\001x\030\005 \002(\007\022\t\n" +
      "\001y\030\006 \002(\007\022\035\n\007streets\030\n \003(\0132\014.StreetIndex\"" +
      "V\n\rPostcodeIndex\022\020\n\010postcode\030\001 \002(\t\022\t\n\001x\030" +
      "\002 \002(\007\022\t\n\001y\030\003 \002(\007\022\035\n\007streets\030\005 \003(\0132\014.Stre" +
      "etIndex\"q\n\013StreetIndex\022\014\n\004name\030\001 \002(\t\022\017\n\007" +
      "name_en\030\002 \001(\t\022\n\n\002id\030\006 \001(\004\022\t\n\001x\030\003 \002(\021\022\t\n\001",
      "y\030\004 \002(\021\022!\n\tbuildings\030\n \003(\0132\016.BuildingInd" +
      "ex\"b\n\rBuildingIndex\022\014\n\004name\030\001 \002(\t\022\017\n\007nam" +
      "e_en\030\002 \001(\t\022\n\n\002id\030\005 \001(\004\022\020\n\010postcode\030\006 \001(\t" +
      "\022\t\n\001x\030\003 \002(\021\022\t\n\001y\030\004 \002(\021B\023\n\021net.osmand.bin" +
      "ary"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_OsmAndStructure_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_OsmAndStructure_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_OsmAndStructure_descriptor,
              new java.lang.String[] { "Version", "MapIndex", "AddressIndex", "VersionConfirm", },
              net.osmand.binary.OsmandOdb.OsmAndStructure.class,
              net.osmand.binary.OsmandOdb.OsmAndStructure.Builder.class);
          internal_static_OsmAndMapIndex_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_OsmAndMapIndex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_OsmAndMapIndex_descriptor,
              new java.lang.String[] { "Levels", },
              net.osmand.binary.OsmandOdb.OsmAndMapIndex.class,
              net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder.class);
          internal_static_MapRootLevel_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_MapRootLevel_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MapRootLevel_descriptor,
              new java.lang.String[] { "MaxZoom", "MinZoom", "Left", "Right", "Top", "Bottom", "Root", },
              net.osmand.binary.OsmandOdb.MapRootLevel.class,
              net.osmand.binary.OsmandOdb.MapRootLevel.Builder.class);
          internal_static_MapTree_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_MapTree_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MapTree_descriptor,
              new java.lang.String[] { "Left", "Right", "Top", "Bottom", "StringTable", "BaseId", "Subtrees", "Leafs", },
              net.osmand.binary.OsmandOdb.MapTree.class,
              net.osmand.binary.OsmandOdb.MapTree.Builder.class);
          internal_static_StringTable_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_StringTable_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_StringTable_descriptor,
              new java.lang.String[] { "S", },
              net.osmand.binary.OsmandOdb.StringTable.class,
              net.osmand.binary.OsmandOdb.StringTable.Builder.class);
          internal_static_MapData_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_MapData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MapData_descriptor,
              new java.lang.String[] { "Coordinates", "Types", "Id", "StringId", "Restrictions", "HighwayMeta", },
              net.osmand.binary.OsmandOdb.MapData.class,
              net.osmand.binary.OsmandOdb.MapData.Builder.class);
          internal_static_OsmAndAddressIndex_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_OsmAndAddressIndex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_OsmAndAddressIndex_descriptor,
              new java.lang.String[] { "Name", "NameEn", "Cities", "Postcodes", "Villages", },
              net.osmand.binary.OsmandOdb.OsmAndAddressIndex.class,
              net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder.class);
          internal_static_CitiesIndex_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_CitiesIndex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CitiesIndex_descriptor,
              new java.lang.String[] { "Cities", },
              net.osmand.binary.OsmandOdb.CitiesIndex.class,
              net.osmand.binary.OsmandOdb.CitiesIndex.Builder.class);
          internal_static_PostcodesIndex_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_PostcodesIndex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_PostcodesIndex_descriptor,
              new java.lang.String[] { "Postcodes", },
              net.osmand.binary.OsmandOdb.PostcodesIndex.class,
              net.osmand.binary.OsmandOdb.PostcodesIndex.Builder.class);
          internal_static_CityIndex_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_CityIndex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CityIndex_descriptor,
              new java.lang.String[] { "CityType", "Name", "NameEn", "Id", "X", "Y", "Streets", },
              net.osmand.binary.OsmandOdb.CityIndex.class,
              net.osmand.binary.OsmandOdb.CityIndex.Builder.class);
          internal_static_PostcodeIndex_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_PostcodeIndex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_PostcodeIndex_descriptor,
              new java.lang.String[] { "Postcode", "X", "Y", "Streets", },
              net.osmand.binary.OsmandOdb.PostcodeIndex.class,
              net.osmand.binary.OsmandOdb.PostcodeIndex.Builder.class);
          internal_static_StreetIndex_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_StreetIndex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_StreetIndex_descriptor,
              new java.lang.String[] { "Name", "NameEn", "Id", "X", "Y", "Buildings", },
              net.osmand.binary.OsmandOdb.StreetIndex.class,
              net.osmand.binary.OsmandOdb.StreetIndex.Builder.class);
          internal_static_BuildingIndex_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_BuildingIndex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_BuildingIndex_descriptor,
              new java.lang.String[] { "Name", "NameEn", "Id", "Postcode", "X", "Y", },
              net.osmand.binary.OsmandOdb.BuildingIndex.class,
              net.osmand.binary.OsmandOdb.BuildingIndex.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
